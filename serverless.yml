# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sample-deeplens

custom:
  pythonRequirements:
    pythonBin: python

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
  stage: dev

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "rekognition:DetectFaces"
        - "rekognition:SearchFacesByImage"
        - "rekognition:IndexFaces"
      Resource: "*"
    - Effect: "Allow"
      Action:
       - "s3:PutObject"
       - "s3:PutObjectAcl"
       - "s3:GetObject"
       - "s3:GetObjectAcl"
       - "s3:DeleteObject"
       - "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::${env:BUCKET_NAME}/*"
    - Effect: "Allow"
      Action:
       - "dynamodb:PutItem"
       - "dynamodb:GetItem"
       - "dynamodb:UpdateItem"
       - "dynamodb:Query"
      Resource:
        - "arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_NUMBER}:table/${env:DYNAMODB_USERS}"
        - "arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_NUMBER}:table/${env:DYNAMODB_INFO}"
    - Effect: "Allow"
      Action:
       - "rekognition:ListFaces"
       - "rekognition:DeleteFaces"
      Resource:
        - "arn:aws:rekognition:${env:AWS_REGION}:${env:AWS_ACCOUNT_NUMBER}:collection/${env:REKOGNITION_COLLECTION_ID}"
    - Effect: "Allow"
      Action:
       - "ses:SendEmail"
      Resource:
        - "arn:aws:ses:${env:AWS_REGION}:${env:AWS_ACCOUNT_NUMBER}:identity/*"
    - Effect: "Allow"
      Action:
       - "kms:Decrypt"
      Resource:
        - "arn:aws:kms:*:*:*"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource: "arn:aws:sqs:${env:AWS_REGION}:${env:AWS_ACCOUNT_NUMBER}:${env:QUEUE_NAME}"
    - Effect: "Allow"
      Action:
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${env:AWS_REGION}:${env:AWS_ACCOUNT_NUMBER}:*"

# you can define service wide environment variables here
  environment:
    BUCKET_NAME: ${env:BUCKET_NAME}
    QUEUE_NAME: ${env:QUEUE_NAME}
    SLACK_API_TOKEN: ${env:SLACK_API_TOKEN}
    SLACK_CHANNEL_ID: ${env:SLACK_CHANNEL_ID}
    SLACK_TRAINING_CHANNEL_ID: ${env:SLACK_TRAINING_CHANNEL_ID}
    REKOGNITION_COLLECTION_ID: ${env:REKOGNITION_COLLECTION_ID}
    DYNAMODB_USERS: ${env:DYNAMODB_USERS}
    DYNAMODB_INFO: ${env:DYNAMODB_INFO}
    EMAIL_SOURCE: ${env:EMAIL_SOURCE}

functions:
  guess:
    handler: handler.guess
    events:
      - s3:
          bucket: ${env:BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: incoming/
  unknown:
    handler: handler.unknown
    events:
      - s3:
          bucket: ${env:BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: unknown/
  train:
    handler: handler.train
    events:
      - http:
          path: faces/train
          method: post
  deleterekognition:
    handler: handler.deleterekognition
  
  batchTrain:
    handler: handler.batchTrain

  # find person, function for greengrass device
  find-person:
    handler: find_person.function_handler
    runtime: python3.6
    role: arn:aws:iam::${env:AWS_ACCOUNT_NUMBER}:role/AWSDeepLensLambdaRole

plugins:
  - serverless-python-requirements
resources:
  Resources:
    PollyQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:QUEUE_NAME}
    DynamoDbUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_USERS}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBUsersPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbUsersTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: arn:aws:dynamodb:*:*:table/my-table
        Roles:
          - Ref: IamRoleLambdaExecution
    DynamoDbInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_INFO}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: datetime
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: datetime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBInfoIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbInfoTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/my-table
        Roles:
          - Ref: IamRoleLambdaExecution